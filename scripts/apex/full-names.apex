/*
* #72 - Full Names
* Implement the method fullNames that takes as input two equal-sized lists of strings firstNames and lastNames, 
* and returns a new list containing full names, with each full name generated by the concatenating the first name 
* and last name at the corresponding location in the input lists.
* 
* Given the following test code:
* List<String> firstNames = new List<String> { 'John', 'Jane' };
* List<String> lastNames = new List<String> { 'Doe', 'Smith' };
* List<String> result = fullNames(firstNames, lastNames);
* 
* The expressions result[0] == 'John Doe', result[1] == 'Jane Smith', and result.size() == 2 should be true. 
* In addition, the two input arrays should be unmodified
*/

public List<String> fullNames(List<String> firstNames, List<String> lastNames) {
    
    List<String> namesList = new List<String>();
    if (!firstNames.isEmpty() && !lastNames.isEmpty()) {
        for (Integer i=0; i<firstNames.size(); i++) {
            namesList.add(firstNames[i] + ' ' + lastNames[i]);
        }
        return namesList;
    }
    // firstNames and lastNames are empty
    return (new List<String>());
}


/*
* Test 1
List<String> first = new List<String>();
List<String> last = new List<String>();
List<String> result = fullNames(first, last);
System.assertEquals(0, result.size(), 'Resulting list should have been size 0');

* Test 2
List<String> expected = new List<String> {'Shizuko Hinson', 'Latonya Franz'};
List<String> first = new List<String> {'Shizuko', 'Latonya'};
List<String> last = new List<String> {'Hinson', 'Franz'};
List<String> result = fullNames(first, last);
System.assertEquals(expected, result, 'Resulting list should match expected list');

* Test 3
List<String> expected = new List<String> {'Adrienne Copeland','Maxine Colon','Jan Coleman','Margarita Miller','Jacqueline Mcdaniel','Ethel Parsons','Joan Nichols','Rachel West','Leroy Holland','Grant Collier','Ramon Reeves','Hannah Hale','Lamar French','Jesse Beck','Margie Griffin','Faye Butler','Shelley Nelson','Abel Farmer','Ricardo Bridges','Wilma Santos','Jane Hubbard','Neal Berry','Denise Klein','Tami Oliver','Ed Vargas','Morris Aguilar','Blake Howard','William Summers','Eloise Lynch','Raul Morgan','Sandy Curry','Lola Stevenson','Pauline Vasquez','Eleanor Bowen','Charlene Swanson','Jo Gonzalez','Malcolm Houston','Johnnie Day','Vincent Saunders','Wilbur Willis','Jeffery Robinson','Bradley Freeman','Faith Reynolds','Don Fitzgerald','Marlene Fowler','Sheryl Harrington','Jan Reese','Terry Welch','Christopher Grant','Flora Chavez'};
List<String> first = new List<String> {'Adrienne','Maxine','Jan','Margarita','Jacqueline','Ethel','Joan','Rachel','Leroy','Grant','Ramon','Hannah','Lamar','Jesse','Margie','Faye','Shelley','Abel','Ricardo','Wilma','Jane','Neal','Denise','Tami','Ed','Morris','Blake','William','Eloise','Raul','Sandy','Lola','Pauline','Eleanor','Charlene','Jo','Malcolm','Johnnie','Vincent','Wilbur','Jeffery','Bradley','Faith','Don','Marlene','Sheryl','Jan','Terry','Christopher','Flora'};
List<String> last = new List<String> {'Copeland','Colon','Coleman','Miller','Mcdaniel','Parsons','Nichols','West','Holland','Collier','Reeves','Hale','French','Beck','Griffin','Butler','Nelson','Farmer','Bridges','Santos','Hubbard','Berry','Klein','Oliver','Vargas','Aguilar','Howard','Summers','Lynch','Morgan','Curry','Stevenson','Vasquez','Bowen','Swanson','Gonzalez','Houston','Day','Saunders','Willis','Robinson','Freeman','Reynolds','Fitzgerald','Fowler','Harrington','Reese','Welch','Grant','Chavez'};
List<String> result = fullNames(first, last);
System.assertEquals(expected, result, 'Resulting list should match the list of 50 full names');
System.assertEquals('Adrienne', first[0], 'List of first names should not be modified');
System.assertEquals('Copeland', last[0], 'List of last names should not be modified');
*/