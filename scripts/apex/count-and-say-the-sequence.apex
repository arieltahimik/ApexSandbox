/*
* #123 - Count-and-say the Sequence
* Can you count and say what characters the string '11121' has?
* 
* It has three '1' characters, followed by one '2', and finally one '1'. 
* Or to put it another way, it has 3 1s, 1 2s and 1 1, which we could write as the string '311211'. 
* For this problem, we define this transformation as "counting and saying". 
* Counting and saying '11121' is '311211'.
* 
* For this problem, you have to generate a sequence given an Integer N. We define base case for N = 1 as '1'. For N > 1, 
* count and say the sequence generated by N - 1.
* 
* Examples:
* 
* countAndSay(1) == '1' // base case
* countAndSay(2) == '11' // previous sequence has one 1.
* countAndSay(3) == '21' // previous sequence has two 1s
* countAndSay(4) == '1211' // previous sequence has one 2, one 1
* countAndSay(5) == '111221' // ... and so on
* countAndSay(6) == '312211'
* countAndSay(7) == '13112221'
* Write a function that takes N (sequence number) as a parameter and outputs the Nth sequence. 1<= N <= 20
* 
* Hints:
* - To get the answer for N, you need to get the answer for N - 1. To get the answer to N - 1, you need the answer to N-2. 
*   This means you need to calculate ALL sequences 1 to N.
* - Break the problem into smaller pieces. First, write code to count and say a String.
* - Explore the concept of method recursion.
*/


public string countAndSay(integer N) {
    // code here
    if (N <= 0 || N > 20) {
        return 'Invalid input';
    }

    // Start with the base case
    String currentSequence = '1';

    // Generate sequences up to N
    for (Integer i = 1; i < N; i++) {
        String nextSequence = '';
        Integer j = 0;

        while (j < currentSequence.length()) {
            String digit = currentSequence.substring(j, j + 1);
            Integer count = 1;

            // Count consecutive identical digits
            while (
                (j + 1 < currentSequence.length()) &&
                (currentSequence.substring(j + 1, j + 2) == digit)
            ) {
                count++;
                j++;
            }

            // Append count and digit to next sequence
            nextSequence += String.valueOf(count) + digit;

            // Move to next new digit
            j++;
        }

        // Update the current sequence for the next round
        currentSequence = nextSequence;
    }

    return currentSequence;
}


/*

* Test 1
String result = countAndSay(1);
System.assertEquals('1', result);

* Test 2
String result = countAndSay(5);
System.assertEquals('111221', result);

* Test 3
String result = countAndSay(20);
System.assertEquals('11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211', result);

* Test 4
String result = countAndSay(10);
System.assertEquals('13211311123113112211', result);
*/